#!/usr/bin/env python

import argparse
import logging

import rosbag_pandas


def build_parser():
    """
    Builds the parser for reading the command line arguments
    :return: The argument parser
    """
    class PostprocAction(argparse.Action):
        def __call__(self, parser, args, values, option_string=None):
            try:
                postproc_functions = [rosbag_pandas.POSTPROCS[arg] for arg in values]
            except KeyError as e:
                raise ValueError('Invalid postproc %s' % e)
            setattr(args, self.dest, postproc_functions)

    parser = argparse.ArgumentParser(description='Script to parse bagfile to csv file')
    parser.add_argument('-b', '--bag', help='Bag file to read', required=True,
                        type=str)
    parser.add_argument('-i', '--include',
                        help='List of keys to include',
                        nargs='*')
    parser.add_argument('-e', '--exclude',
                        help='List of keys to exclude',
                        nargs='*')
    parser.add_argument('-o', '--output', help='name of the output file', required=True)
    parser.add_argument('--postproc',
                        action=PostprocAction,
                        help="Post process dataframe before writing to csv. Choose from {}".format(rosbag_pandas.POSTPROCS.keys()),
                        nargs='+',
                        default=None)
    parser.add_argument('-v', '--verbose',
                        help="Log verbose",
                        default=False, action="store_true")
    return parser


if __name__ == '__main__':
    parser = build_parser()
    args = parser.parse_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    df = rosbag_pandas.bag_to_dataframe(args.bag, include=args.include, exclude=args.exclude, postproc=args.postproc)
    df.to_csv(args.output)
